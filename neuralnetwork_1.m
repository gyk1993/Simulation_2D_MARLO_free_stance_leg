function [Y,Xf,Af] = neuralnetwork_1(X,~,~)
%NEURALNETWORK_1 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-May-2017 14:38:59.
% 
% [Y] = neuralnetwork_1(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -1.5998905080623;
x1_step1.gain = 0.621007598534865;
x1_step1.ymin = -1;

% Layer 1
b1 = [-23.789933729482886;-5.3982927034826416;-0.46322118863771922;3.5695729771614557;9.3237108225046601;-10.357769619371162];
IW1_1 = [27.022277072353315;8.2815781540602504;0.83981239346442305;8.9653119801315331;13.730387987237528;-11.151869679666104];

% Layer 2
b2 = [0.40196151957176407;0.40590753450708028;0.45649204989909958;0.55417414836691881;-0.0065508356284669595;-0.18257296618844246];
LW2_1 = [-0.01734824027461658 -0.15408614570314566 1.6546736537548967 0.1210027986723093 -0.030162968131379198 -0.083624533867665787;-0.0058715228742582306 -0.17998687448752695 1.6757170510385855 0.12805239087931961 -0.042161876891626482 -0.090126965808094511;0.064269082100030767 -0.33734662777221919 1.8825524430507974 0.14611569581362807 -0.11027580815613622 -0.11302183828083295;0.49824260198292514 -1.1328140851011772 0.98538156536276622 0.12358390214033281 -0.5938851364585962 -0.17947783588504904;0.23624502671354278 -0.4446501572221947 -0.61671114161529472 0.0042511706682212555 -0.2778839242140787 -0.017735138122760667;0.15481054538351027 -0.25212584223647644 -0.98926524710192443 -0.021606248491989465 -0.20040150346841951 0.011758933521566194];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [3.19548745675526;3.78227035781258;5.83677191519397;11.5384235430908;4.58566078001831;2.70150176480154];
y1_step1.xoffset = [2.79374496704227;2.84126721839868;2.93637300853785;2.9931482103493;2.85644820700827;2.7114273056441];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
