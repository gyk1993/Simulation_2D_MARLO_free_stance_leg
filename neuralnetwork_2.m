function [Y,Xf,Af] = neuralnetwork_2(X,~,~)
%NEURALNETWORK_2 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-May-2017 14:39:00.
% 
% [Y] = neuralnetwork_2(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -1.5998905080623;
x1_step1.gain = 0.621007598534865;
x1_step1.ymin = -1;

% Layer 1
b1 = [15.935002073791141;-2.0324414780895403;-0.43754409578261572;-10.679335252841405;-2.6490762690834049;-2.3384475082709577];
IW1_1 = [-18.526848338703342;3.0655280366549618;0.70009706980694375;-29.40943166856632;-5.4366402627702186;-4.4640507887305434];

% Layer 2
b2 = [-0.19001678173349446;-0.3052969219932154;-0.27195808800932725;0.6774956345159685;1.7223593799467056;1.2598690649495874];
LW2_1 = [0.025626617750490827 -0.3531734446752659 -0.58958645694090683 0.11863293476942778 -1.9328744558305762 2.1743147736528536;-0.018426214100188694 -0.22611793440149691 -1.0299511853245695 0.104845888114848 -1.3635879681869993 1.5353515862746185;-0.081431403123901971 -0.35072471441224129 -0.86513548216810299 0.16931669050231168 -1.7191097826922284 1.8555346832703636;-0.42225675518259148 -1.9178920726861026 2.4794482168407339 0.32460633135710826 -3.2157478607954548 3.8207357332349883;-0.4584965817017837 -3.1987906629968403 7.5393342154499896 0.062102164945070273 -2.3266997994515664 3.562838570897771;0.072782731898148559 -1.4393717736798299 5.2222768519595144 -0.2616999574165994 0.30004892678061018 0.55173370357832385];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [6.46255071264034;4.28860382753767;3.99534055481759;6.27210520646099;9.47937964830586;4.68545594695981];
y1_step1.xoffset = [2.95195349241899;2.87176115348578;2.84643605010836;2.91238539527049;3.00414363112506;2.90000544988226];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
