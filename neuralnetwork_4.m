function [Y,Xf,Af] = neuralnetwork_4(X,~,~)
%NEURALNETWORK_4 neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-May-2017 14:39:01.
% 
% [Y] = neuralnetwork_4(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 1xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 6xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = -1.5998905080623;
x1_step1.gain = 0.621007598534865;
x1_step1.ymin = -1;

% Layer 1
b1 = [-7.9444486090196431;1.7481417602627924;1.3604774271418687;1.4194817204315999;-2.49570893145063;-3.2402806091616596];
IW1_1 = [8.9390845998947164;-2.9298503128069719;-3.9373278498237472;4.7620340888324773;-3.6053097843844295;-3.9392676166184186];

% Layer 2
b2 = [-1.184593172697717;-1.327503538055897;1.0789907842716935;-0.52400775280525391;-0.99112859579761203;-1.079524618766649];
LW2_1 = [0.40434956694117363 2.1879275426860807 -0.6186745317834067 0.18682722498986953 -1.5267964518491834 0.63399188236099713;-0.24438675712775149 1.2524338462772184 -0.36350610540952838 0.14691718648908425 -0.10768606631667017 -0.97086915675462304;1.5459381620522403 2.935595894117923 -2.3843918214619082 -1.3421865009118794 -2.1925986978728793 2.1713750754735237;-0.14152775966327732 -0.51804397662293533 1.4268202288685812 0.88811596228266754 -0.4183864878756039 0.53991384838435041;-1.3917446773687983 -2.8278883231586991 2.2739190554585607 1.2766082900860489 2.0443580878783045 -2.0858071298309184;-0.56744417970902128 -2.1503115289655192 2.5566136279223866 1.6330585807318552 1.8770909307632981 -1.4170415845386046];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [93.282266306785;19.2269766319022;15.8745941364607;17.4727472739864;20.0409035607327;97.2378103837189];
y1_step1.xoffset = [0.872674651644303;0.834212443187748;1.23000758668333;1.44574716642483;1.13500519730331;0.872662579308983];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX, X = {X}; end;

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
